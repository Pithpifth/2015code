// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


#include "driveCommand.h"
#include "../IMUlib/IMU.h"
#include <math.h>

//Setting up variables
float XAxis;
float YAxis;
float RotateAxis;
float imu_yaw;
const int IMU_UPDATE_RATE = 50;
const int BAUD_RATE = 57600;
float pi = 3.141526;
float current_gyro_angle_radians;
float YAxis_Calc;
bool isCalibrating;

//Pointing to Serial Port and IMU
SerialPort *serial_port;
IMU *imu;

driveCommand::driveCommand() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveBaseSub);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void driveCommand::Initialize() {
	//Setting up variables and IMU
	//This makes sure when we enable the robot, the joystick values are not already pointing forward. 
	XAxis = 0;
	YAxis = 0;
	RotateAxis = 0;
	serial_port = new SerialPort(BAUD_RATE);
	imu = new IMU(serial_port, IMU_UPDATE_RATE);
	imu->ZeroYaw();
	isCalibrating = imu->IsCalibrating();
	printf("%d\n",isCalibrating);
}

// Called repeatedly when this Command is scheduled to run
void driveCommand::Execute() {
	imu_yaw = imu->GetYaw();
	printf("%f3.1\n", imu_yaw);
			
	XAxis = Robot::oi->getJoystick1()->GetRawAxis(1);
	YAxis = Robot::oi->getJoystick1()->GetRawAxis(2);
	RotateAxis = Robot::oi->getJoystick1()->GetRawAxis(4);
	
	//Sets up deadbands (this gets rid of the robot moving very slowly
	//even when you are not touching the joystick. Because the joystick
	//is never really at zero it is at for example 0.0389583. This makes
	//sure every joystick is in the range of -0.20 to 0.20 and if it is set all
	//the axis to zero, if not send the current value to the MechDrive function.
	if(XAxis < 0.20 && XAxis > -0.20)
	{
		XAxis = 0;
	}
	if(YAxis < 0.20 && YAxis > -0.20)
	{
		YAxis = 0;
	}
	if(RotateAxis < 0.20 && RotateAxis > -0.20)
	{
		RotateAxis = 0;
	}
	
	//Ewwwww! Trig Calculations! This block of code is saying "If the robot is pointing
	//in one direction and you are making it drive in another direction then rotate X/Y
	//So that foward is really another angle
	current_gyro_angle_radians = imu_yaw * pi/180;
	YAxis_Calc = YAxis * cos(current_gyro_angle_radians) + XAxis * sin(current_gyro_angle_radians);
	XAxis = -YAxis * sin(current_gyro_angle_radians) + XAxis * cos(current_gyro_angle_radians);
	YAxis = YAxis_Calc;

	//Sends XAxis, YAxis, and RotateAxis to MechDrive function in DriveBaseSub.cpp
	Robot::driveBaseSub->MechDrive(XAxis,YAxis,RotateAxis,imu_yaw);
}

// Make this return true when this Command no longer needs to run execute()
bool driveCommand::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void driveCommand::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void driveCommand::Interrupted() {

}
