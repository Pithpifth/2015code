// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


#include "RotatetoAngle.h"
#include "math.h"

const int ANGLE_TOLERANCE = 2; // Tolerance in degrees on either side of set angle
const int DRIVE_ANGLE = 0; // Only causing drive spins in this command - it doesn't need to know angle.  
const int DRIVE_X = 0; // used for translation magnitude to drive command - not used - stays 0
const int DRIVE_Y = 0; // used for translation magnitude to drive command - not used - stays 0
const int LOOP_IT_CHECK = 5; //checks for iterations through loop. Change later depending on robot


float imu_yaw = 0; // Measurement from the IMU
float IMU_Scaled = 0; // Translated to a non-wrapping scale (-180 to 180 -> 820 to 1180)

float RotateAxisOverride = 0; //Joystick value

float setSpeed = 0; // Saves the rotation speed functional parameter passed in.
float setAngle = 0; // Saves the commanded go-to angle functional parameter passed in.

float setinitSpeed = 0; // Initial Set Speed
float setinitAngle = 0; // Initial Set Angle

float degrees_to = 0; //degrees to rotate to "Rotato" - Walter 2014
float degrees_to_abs = 0; //absolute value of degrees_to
float setAngleScaled = 0; // Converted value of the Commanded Set Angle to linear scale.
float spinDirection = 1;  // Sets pin direction: 1=Clockwise from robot top, -1=CCW

float RotCmd = 0; // Direction * Rot Speed passed to drive command.

bool TooFarCW = false; // Robot is further CW than set point: needs to spin CCW
bool TooFarCCW = false; //Robot is further CCW than set point: needs to spin CW

bool TooFarCCWDupe = false;
bool TooFarCWDupe = false; //Basically duplicates of variables above

bool isDone = false; //Flag to OS/WPI to end this command.

int times_through_loop = 0; //counter for fixing overshooting



RotatetoAngle::RotatetoAngle(float Angle, float Speed) {
	// Use requires() here to declare subsystem dependencies
	Requires(Robot::driveBaseSub);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	
	//Make copies of the variables local to the command
	setinitAngle = Angle;
	setinitSpeed = Speed;
	
}

// Called just before this Command runs the first time
void RotatetoAngle::Initialize() {
	isDone = false; // Just started - can't be done yet
	printf("\n\nRotateToAngleInit\n\n");

	imu_yaw = 0;
	IMU_Scaled = 0;
	times_through_loop = 0;
	
	setAngleScaled = 0;
	spinDirection = 1;
	
	RotCmd = 0;
	
	//Assume we don't need the robot to spin until proven via measurement.
	TooFarCW = false;
	TooFarCCW = false;
}

// Called repeatedly when this Command is scheduled to run
void RotatetoAngle::Execute() {

	RotateAxisOverride = Robot::oi->getJoystick1()->GetRawAxis(4); //get joystick for override
	//printf("Executing rotate to angle command");	
	
	isDone = false; // Just started - can't be done yet
	
	//Assume we don't need the robot to spin until proven via measurement.
	TooFarCW = false;
	TooFarCCW = false;
	
	printf("\n");
	printf("%f", setSpeed);
	printf("\n");
	
	//Default to no rotation commanded
	RotCmd = 0;
	
	//Read the actual Robot Angle from IMU
	imu_yaw = Robot::driveBaseSub->pRobot_IMU->GetYaw();
	
	//Scale the IMU reading 
	IMU_Scaled = imu_yaw + 1000;
	printf("(loop) Scaled IMU %3.2f\n", IMU_Scaled);
	
	//Scale Set Angle 
	setAngleScaled = setAngle + 1000;
	printf("(loop) Scaled Set Angle %3.2f\n", setAngleScaled);
	
	//set spin direction and degrees to rotate to
	if(IMU_Scaled > (setAngleScaled + ANGLE_TOLERANCE)) {
		TooFarCW = true;
		spinDirection = -1;
		degrees_to = IMU_Scaled - setAngleScaled;
	}
	
	//set spin direction and degrees to rotate to
	if (IMU_Scaled < (setAngleScaled - ANGLE_TOLERANCE)) {
		TooFarCCW = true;
		spinDirection = 1;
		degrees_to = setAngleScaled - IMU_Scaled;
	}

	//setSpeed = .157* pow(1.011, degrees_to_abs); Walter's dream equation
	//Only start spinning if we need to.
	if (TooFarCW || TooFarCCW) {
		degrees_to_abs = fabs(degrees_to);
		//scale speeds based on degrees. Why not an exponential function? :(
		if(degrees_to_abs < 180)
		{
			setSpeed = 1;
		}
		if(degrees_to_abs < 90)
		{
			setSpeed = 0.4;
		}
		if(degrees_to_abs < 60)
		{
			setSpeed = 0.3;
		}
		if(degrees_to_abs < 30)
		{
			setSpeed = 0.2;
		}
		RotCmd = spinDirection * setSpeed;
		times_through_loop = 1;
		printf("(loop) SpinCW = %d     SpinCCW = %d     SpinDir = %f     RotCmd = %3.2f\n", TooFarCCW, TooFarCW, spinDirection, RotCmd);
		setSpeed = setinitSpeed * setSpeed; //just in case.
	}
		
	// If we didn't need to spin, we can end the command now.
	else {
		printf("\n\n(loop)Didn't need to spin.\n\n");
		if(times_through_loop == LOOP_IT_CHECK || times_through_loop == 0 || (TooFarCCWDupe && TooFarCWDupe && times_through_loop == LOOP_IT_CHECK))
		{
			isDone = true;
		}
		//the reason we implement the loop is because it allows us to check if the
		//robot is past the 0 degrees and if it doesn't thenm increment to loop
		//changes the amount of times for different robots.
		times_through_loop++;
	}
	Robot::driveBaseSub->MechDrive(DRIVE_X, DRIVE_Y, RotCmd, DRIVE_ANGLE);
	if(RotateAxisOverride < 0.20 && RotateAxisOverride > -0.20)
	{
		RotateAxisOverride = 0;
		isDone = false;
	}
	else 
	{
		RotateAxisOverride = RotateAxisOverride * fabs(RotateAxisOverride);
		isDone = true;
	}
}
// Make this return true when this Command no longer needs to run execute()
bool RotatetoAngle::IsFinished() {
	
	printf("\n\nRan through execute loop.\n\n");
	return isDone;
}

// Called once after isFinished returns true
void RotatetoAngle::End() {

	printf("\n\nActually done with the command\n\n");
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void RotatetoAngle::Interrupted() {

	//not sure if it matters if this or any get interrupted - curious if it happens though
	printf("********************Interrupted!!!***********************");	
	

}
